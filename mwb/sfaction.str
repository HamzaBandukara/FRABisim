functor StringFAction(structure N : SNAME;
		      structure SL : SORTEDLIST) : SFACTION =
struct

   structure N = N

   datatype action = Fusion of (N.name * N.name) list
     | Input of N.name
     | Output of N.name

   fun free_names(Fusion pl) =
       SL.sort N.le true (Lib.fold (fn ((a,b),l) => a::b::l) pl [])
     | free_names (Input n) = [n]
     | free_names (Output n) = [n]

   fun mkstr(Fusion f) =
       if null f then "1"
       else
	   "{"^
	   (Lib.mapconcat (fn (a,b)=>(N.mkstr a)^"="^(N.mkstr b)) f ",")
	   ^"}"
     | mkstr(Input(c)) = (N.mkstr c)
     | mkstr(Output(c)) ="'" ^ (N.mkstr c)

   fun d_le ((a,c),(b,d)) =		(* a<=b & (a<b | c<=d) *)
       N.le(a,b) andalso (not(N.le(b,a)) orelse N.le(c,d))
   and d_eq ((a,c),(b,d)) = N.eq(a,b) andalso N.eq(c,d)

   fun eq (Fusion f,Fusion g) =		(* gahds *)
       Lib.eq d_eq ((SL.sort d_le true f),(SL.sort d_le true g))
     | eq (Input(c1),Input(c2)) = N.eq(c1,c2)
     | eq (Output(c1),Output(c2)) = N.eq(c1,c2)
     | eq (_,_) = false

end
