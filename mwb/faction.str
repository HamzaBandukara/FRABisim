(* Fusion calculus action, based on pi action *)
functor Faction(structure N : NAME;
		structure F : EQUIV;
		sharing F.N = N) : FACTION =
struct

   structure N = N
   structure F = F

   datatype action = Fusion of F.equiv
                | Input of N.name
                | Output of N.name

   fun mkstr(Fusion f) = if F.is_empty f then "1" else ("{"^(F.mkstr f)^"}")
     | mkstr(Input(c)) = (N.mkstr c)
     | mkstr(Output(c)) ="'" ^ (N.mkstr c)

   fun makstr(Fusion f,nl) =
       if F.is_empty f then "1" else ("{"^(F.makstr(f,nl))^"}")
     | makstr (Input(c),nl) = N.makstr(c,nl)
     | makstr (Output(c),nl) = "'"^(N.makstr(c,nl))

   fun hashval(Fusion f) = F.hashval f
     | hashval (Input n) = N.code(n)
     | hashval (Output n) = N.code(n)

   and is_fusion(Fusion _) = true
     | is_fusion _ = false
   and is_one(Fusion f) = F.is_empty f
     | is_one _ = false
   and is_input(Input _) = true
     | is_input _ = false
   and is_output(Output _) = true
     | is_output _ = false
   and mk_one () = Fusion F.EmptyE
   and mk_fusion (xs,ys) =
       Fusion(Lib.fold2 (fn (x,y,e)=> F.join(F.equate(x,y),e))
	      xs ys F.EmptyE)
   and mk_input (n) = Input(n)
   and mk_output(n) = Output(n)
   and subject(Input(n)) = n
     | subject(Output(n)) = n

   and fusion_repr(Fusion f,n) =
       F.representative(f,n)
   and fusion_minus(Fusion f,n) = Fusion (F.minus(f,n))
   and fusion_eq_under(Fusion f,Fusion g,M) =
       (F.is_empty(f) andalso F.is_empty(g)) orelse
       (F.eq(F.join(f,M),F.join(g,M)))
   and fusion_equiv(Fusion f) = f
   and mk_fusion_equiv(e) = Fusion e

   and eeq e (Fusion f,Fusion g) =
       (F.is_empty(f) andalso F.is_empty(g))
       orelse F.eq(F.join(e,f),F.join(e,g))
     | eeq e (Input c1,Input c2) = F.implies(e,F.equate(c1,c2))
     | eeq e (Output c1,Output c2) = F.implies(e,F.equate(c1,c2))
     | eeq _ _ = false

   and eq (Fusion f,Fusion g) = F.eq(f,g)
     | eq (Input(c1),Input(c2)) = N.eq(c1,c2)
     | eq (Output(c1),Output(c2)) = N.eq(c1,c2)
     | eq (_,_) = false

   and free_names(Fusion f,lvl) = F.free_names(f,lvl)
     | free_names (Input(c),lvl) = if N.is_free(c,lvl) then [N.free(c,lvl)] else nil
     | free_names (Output(c),lvl) = if N.is_free(c,lvl) then [N.free(c,lvl)] else nil

   and names(Fusion f) = F.names f
     | names(Input(c)) = [c]
     | names(Output(c)) = [c]

(* obsolete
   fun substitute(e,v,Fusion f) = Fusion(F.substitute(e,v,f))
     | substitute(e,v,Input(n)) = Input(N.substitute(e,v,n))
     | substitute(e,v,Output(n))= Output(N.substitute(e,v,n))
*)

   fun beta_reduce (Fusion f) E = Fusion(F.beta_reduce f E)
     | beta_reduce (Input(n)) E = Input(N.beta_reduce n E)
     | beta_reduce (Output(n)) E = Output(N.beta_reduce n E)
end
